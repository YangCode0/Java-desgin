package factory.SimpleFactory;

/**
 * 这三种模式从上到下逐步抽象，并且更具一般性。《设计模式》一书中将工厂模式分为两类：工厂方法模式与抽象工厂模式。将简单工厂模式看为工厂方法模式的一种特例，两者归为一类。 我们先从以下案例对工厂模式做个初步的了解：
 * （1）在没有工厂的时代，如果客户需要一款宝马车，那么就需要客户去创建一款宝马车，然后拿来用。
 * （2）简单工厂模式：后来出现了工厂，用户不再需要去创建宝马车，由工厂进行创建，想要什么车，直接通过工厂创建就可以了。
 * 比如想要320i系列车，工厂就创建这个系列的车。
 * （3）工厂方法模式：为了满足客户，宝马车系列越来越多，如320i、523i等等系列，一个工厂无法创建所有的宝马系列，
 * 于是又单独分出来多个具体的工厂，每个具体工厂创建一种系列，即具体工厂类只能创建一个具体产品。但是宝马工厂还是个抽象，你需要指定某个具体的工厂才能生产车出来。
 * （4）抽象工厂模式：随着客户要求越来越高，宝马车必须配置空调，于是这个工厂开始生产宝马车和需要的空调。
 * 最终是客户只要对宝马的销售员说：我要523i空调车，销售员就直接给他523i空调车了。而不用自己去创建523i空调车宝马车。
 */

public class Client {
    public static void main(String[] args) {
//        BMW320 bmw320 = new BMW320();
//        BMW330 bmw330 = new BMW330();

        //简单工厂模式
        Product a = SimpleFactory.creat("A");
        a.operation();

        Product b = SimpleFactory.creat("B");
        b.operation();


    }
}
